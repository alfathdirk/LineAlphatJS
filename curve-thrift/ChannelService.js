//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

//HELPER FUNCTIONS AND STRUCTURES

ChannelService_approveChannelAndIssueChannelToken_args = function(args) {
  this.channelId = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
  }
};
ChannelService_approveChannelAndIssueChannelToken_args.prototype = {};
ChannelService_approveChannelAndIssueChannelToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_approveChannelAndIssueChannelToken_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_approveChannelAndIssueChannelToken_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_approveChannelAndIssueChannelToken_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ChannelToken(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_approveChannelAndIssueChannelToken_result.prototype = {};
ChannelService_approveChannelAndIssueChannelToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ChannelToken();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_approveChannelAndIssueChannelToken_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_approveChannelAndIssueChannelToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_approveChannelAndIssueRequestToken_args = function(args) {
  this.channelId = null;
  this.otpId = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.otpId !== undefined && args.otpId !== null) {
      this.otpId = args.otpId;
    }
  }
};
ChannelService_approveChannelAndIssueRequestToken_args.prototype = {};
ChannelService_approveChannelAndIssueRequestToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.otpId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_approveChannelAndIssueRequestToken_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_approveChannelAndIssueRequestToken_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.otpId !== null && this.otpId !== undefined) {
    output.writeFieldBegin('otpId', Thrift.Type.STRING, 2);
    output.writeString(this.otpId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_approveChannelAndIssueRequestToken_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_approveChannelAndIssueRequestToken_result.prototype = {};
ChannelService_approveChannelAndIssueRequestToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_approveChannelAndIssueRequestToken_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_approveChannelAndIssueRequestToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_fetchNotificationItems_args = function(args) {
  this.localRev = null;
  if (args) {
    if (args.localRev !== undefined && args.localRev !== null) {
      this.localRev = args.localRev;
    }
  }
};
ChannelService_fetchNotificationItems_args.prototype = {};
ChannelService_fetchNotificationItems_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.localRev = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_fetchNotificationItems_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_fetchNotificationItems_args');
  if (this.localRev !== null && this.localRev !== undefined) {
    output.writeFieldBegin('localRev', Thrift.Type.I64, 2);
    output.writeI64(this.localRev);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_fetchNotificationItems_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new NotificationFetchResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_fetchNotificationItems_result.prototype = {};
ChannelService_fetchNotificationItems_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new NotificationFetchResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_fetchNotificationItems_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_fetchNotificationItems_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getApprovedChannels_args = function(args) {
  this.lastSynced = null;
  this.locale = null;
  if (args) {
    if (args.lastSynced !== undefined && args.lastSynced !== null) {
      this.lastSynced = args.lastSynced;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
ChannelService_getApprovedChannels_args.prototype = {};
ChannelService_getApprovedChannels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastSynced = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getApprovedChannels_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getApprovedChannels_args');
  if (this.lastSynced !== null && this.lastSynced !== undefined) {
    output.writeFieldBegin('lastSynced', Thrift.Type.I64, 2);
    output.writeI64(this.lastSynced);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 3);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getApprovedChannels_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ApprovedChannelInfos(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_getApprovedChannels_result.prototype = {};
ChannelService_getApprovedChannels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ApprovedChannelInfos();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getApprovedChannels_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getApprovedChannels_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getChannelInfo_args = function(args) {
  this.channelId = null;
  this.locale = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
ChannelService_getChannelInfo_args.prototype = {};
ChannelService_getChannelInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getChannelInfo_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getChannelInfo_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 2);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 3);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getChannelInfo_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ChannelInfo(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_getChannelInfo_result.prototype = {};
ChannelService_getChannelInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ChannelInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getChannelInfo_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getChannelInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getChannelNotificationSetting_args = function(args) {
  this.channelId = null;
  this.locale = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
ChannelService_getChannelNotificationSetting_args.prototype = {};
ChannelService_getChannelNotificationSetting_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getChannelNotificationSetting_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getChannelNotificationSetting_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 2);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getChannelNotificationSetting_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ChannelNotificationSetting(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_getChannelNotificationSetting_result.prototype = {};
ChannelService_getChannelNotificationSetting_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ChannelNotificationSetting();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getChannelNotificationSetting_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getChannelNotificationSetting_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getChannelNotificationSettings_args = function(args) {
  this.locale = null;
  if (args) {
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
ChannelService_getChannelNotificationSettings_args.prototype = {};
ChannelService_getChannelNotificationSettings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getChannelNotificationSettings_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getChannelNotificationSettings_args');
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 1);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getChannelNotificationSettings_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ChannelNotificationSetting]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_getChannelNotificationSettings_result.prototype = {};
ChannelService_getChannelNotificationSettings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size720 = 0;
        var _rtmp3724;
        this.success = [];
        var _etype723 = 0;
        _rtmp3724 = input.readListBegin();
        _etype723 = _rtmp3724.etype;
        _size720 = _rtmp3724.size;
        for (var _i725 = 0; _i725 < _size720; ++_i725)
        {
          var elem726 = null;
          elem726 = new ChannelNotificationSetting();
          elem726.read(input);
          this.success.push(elem726);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getChannelNotificationSettings_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getChannelNotificationSettings_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter727 in this.success)
    {
      if (this.success.hasOwnProperty(iter727))
      {
        iter727 = this.success[iter727];
        iter727.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getChannels_args = function(args) {
  this.lastSynced = null;
  this.locale = null;
  if (args) {
    if (args.lastSynced !== undefined && args.lastSynced !== null) {
      this.lastSynced = args.lastSynced;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
ChannelService_getChannels_args.prototype = {};
ChannelService_getChannels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastSynced = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getChannels_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getChannels_args');
  if (this.lastSynced !== null && this.lastSynced !== undefined) {
    output.writeFieldBegin('lastSynced', Thrift.Type.I64, 2);
    output.writeI64(this.lastSynced);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 3);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getChannels_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ChannelInfos(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_getChannels_result.prototype = {};
ChannelService_getChannels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ChannelInfos();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getChannels_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getChannels_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getDomains_args = function(args) {
  this.lastSynced = null;
  if (args) {
    if (args.lastSynced !== undefined && args.lastSynced !== null) {
      this.lastSynced = args.lastSynced;
    }
  }
};
ChannelService_getDomains_args.prototype = {};
ChannelService_getDomains_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastSynced = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getDomains_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getDomains_args');
  if (this.lastSynced !== null && this.lastSynced !== undefined) {
    output.writeFieldBegin('lastSynced', Thrift.Type.I64, 2);
    output.writeI64(this.lastSynced);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getDomains_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ChannelDomains(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_getDomains_result.prototype = {};
ChannelService_getDomains_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ChannelDomains();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getDomains_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getDomains_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getFriendChannelMatrices_args = function(args) {
  this.channelIds = null;
  if (args) {
    if (args.channelIds !== undefined && args.channelIds !== null) {
      this.channelIds = Thrift.copyList(args.channelIds, [null]);
    }
  }
};
ChannelService_getFriendChannelMatrices_args.prototype = {};
ChannelService_getFriendChannelMatrices_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size728 = 0;
        var _rtmp3732;
        this.channelIds = [];
        var _etype731 = 0;
        _rtmp3732 = input.readListBegin();
        _etype731 = _rtmp3732.etype;
        _size728 = _rtmp3732.size;
        for (var _i733 = 0; _i733 < _size728; ++_i733)
        {
          var elem734 = null;
          elem734 = input.readString().value;
          this.channelIds.push(elem734);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getFriendChannelMatrices_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getFriendChannelMatrices_args');
  if (this.channelIds !== null && this.channelIds !== undefined) {
    output.writeFieldBegin('channelIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.channelIds.length);
    for (var iter735 in this.channelIds)
    {
      if (this.channelIds.hasOwnProperty(iter735))
      {
        iter735 = this.channelIds[iter735];
        output.writeString(iter735);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getFriendChannelMatrices_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new FriendChannelMatricesResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_getFriendChannelMatrices_result.prototype = {};
ChannelService_getFriendChannelMatrices_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new FriendChannelMatricesResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getFriendChannelMatrices_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getFriendChannelMatrices_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getNotificationBadgeCount_args = function(args) {
  this.localRev = null;
  if (args) {
    if (args.localRev !== undefined && args.localRev !== null) {
      this.localRev = args.localRev;
    }
  }
};
ChannelService_getNotificationBadgeCount_args.prototype = {};
ChannelService_getNotificationBadgeCount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.localRev = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getNotificationBadgeCount_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getNotificationBadgeCount_args');
  if (this.localRev !== null && this.localRev !== undefined) {
    output.writeFieldBegin('localRev', Thrift.Type.I64, 2);
    output.writeI64(this.localRev);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_getNotificationBadgeCount_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_getNotificationBadgeCount_result.prototype = {};
ChannelService_getNotificationBadgeCount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_getNotificationBadgeCount_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_getNotificationBadgeCount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_issueChannelToken_args = function(args) {
  this.channelId = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
  }
};
ChannelService_issueChannelToken_args.prototype = {};
ChannelService_issueChannelToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_issueChannelToken_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_issueChannelToken_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_issueChannelToken_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ChannelToken(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_issueChannelToken_result.prototype = {};
ChannelService_issueChannelToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ChannelToken();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_issueChannelToken_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_issueChannelToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_issueRequestToken_args = function(args) {
  this.channelId = null;
  this.otpId = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.otpId !== undefined && args.otpId !== null) {
      this.otpId = args.otpId;
    }
  }
};
ChannelService_issueRequestToken_args.prototype = {};
ChannelService_issueRequestToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.otpId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_issueRequestToken_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_issueRequestToken_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.otpId !== null && this.otpId !== undefined) {
    output.writeFieldBegin('otpId', Thrift.Type.STRING, 2);
    output.writeString(this.otpId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_issueRequestToken_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_issueRequestToken_result.prototype = {};
ChannelService_issueRequestToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_issueRequestToken_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_issueRequestToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_issueRequestTokenWithAuthScheme_args = function(args) {
  this.channelId = null;
  this.otpId = null;
  this.authScheme = null;
  this.returnUrl = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.otpId !== undefined && args.otpId !== null) {
      this.otpId = args.otpId;
    }
    if (args.authScheme !== undefined && args.authScheme !== null) {
      this.authScheme = Thrift.copyList(args.authScheme, [null]);
    }
    if (args.returnUrl !== undefined && args.returnUrl !== null) {
      this.returnUrl = args.returnUrl;
    }
  }
};
ChannelService_issueRequestTokenWithAuthScheme_args.prototype = {};
ChannelService_issueRequestTokenWithAuthScheme_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.otpId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size736 = 0;
        var _rtmp3740;
        this.authScheme = [];
        var _etype739 = 0;
        _rtmp3740 = input.readListBegin();
        _etype739 = _rtmp3740.etype;
        _size736 = _rtmp3740.size;
        for (var _i741 = 0; _i741 < _size736; ++_i741)
        {
          var elem742 = null;
          elem742 = input.readString().value;
          this.authScheme.push(elem742);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.returnUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_issueRequestTokenWithAuthScheme_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_issueRequestTokenWithAuthScheme_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.otpId !== null && this.otpId !== undefined) {
    output.writeFieldBegin('otpId', Thrift.Type.STRING, 2);
    output.writeString(this.otpId);
    output.writeFieldEnd();
  }
  if (this.authScheme !== null && this.authScheme !== undefined) {
    output.writeFieldBegin('authScheme', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.authScheme.length);
    for (var iter743 in this.authScheme)
    {
      if (this.authScheme.hasOwnProperty(iter743))
      {
        iter743 = this.authScheme[iter743];
        output.writeString(iter743);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.returnUrl !== null && this.returnUrl !== undefined) {
    output.writeFieldBegin('returnUrl', Thrift.Type.STRING, 4);
    output.writeString(this.returnUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_issueRequestTokenWithAuthScheme_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new RequestTokenResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_issueRequestTokenWithAuthScheme_result.prototype = {};
ChannelService_issueRequestTokenWithAuthScheme_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new RequestTokenResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_issueRequestTokenWithAuthScheme_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_issueRequestTokenWithAuthScheme_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_reserveCoinUse_args = function(args) {
  this.request = null;
  this.locale = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new CoinUseReservation(args.request);
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
ChannelService_reserveCoinUse_args.prototype = {};
ChannelService_reserveCoinUse_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new CoinUseReservation();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_reserveCoinUse_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_reserveCoinUse_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 3);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_reserveCoinUse_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_reserveCoinUse_result.prototype = {};
ChannelService_reserveCoinUse_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_reserveCoinUse_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_reserveCoinUse_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_revokeChannel_args = function(args) {
  this.channelId = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
  }
};
ChannelService_revokeChannel_args.prototype = {};
ChannelService_revokeChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_revokeChannel_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_revokeChannel_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_revokeChannel_result = function(args) {
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_revokeChannel_result.prototype = {};
ChannelService_revokeChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_revokeChannel_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_revokeChannel_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_syncChannelData_args = function(args) {
  this.lastSynced = null;
  this.locale = null;
  if (args) {
    if (args.lastSynced !== undefined && args.lastSynced !== null) {
      this.lastSynced = args.lastSynced;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
ChannelService_syncChannelData_args.prototype = {};
ChannelService_syncChannelData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastSynced = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_syncChannelData_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_syncChannelData_args');
  if (this.lastSynced !== null && this.lastSynced !== undefined) {
    output.writeFieldBegin('lastSynced', Thrift.Type.I64, 2);
    output.writeI64(this.lastSynced);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 3);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_syncChannelData_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ChannelSyncDatas(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_syncChannelData_result.prototype = {};
ChannelService_syncChannelData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ChannelSyncDatas();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_syncChannelData_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_syncChannelData_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_updateChannelNotificationSetting_args = function(args) {
  this.setting = null;
  if (args) {
    if (args.setting !== undefined && args.setting !== null) {
      this.setting = Thrift.copyList(args.setting, [ChannelNotificationSetting]);
    }
  }
};
ChannelService_updateChannelNotificationSetting_args.prototype = {};
ChannelService_updateChannelNotificationSetting_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size744 = 0;
        var _rtmp3748;
        this.setting = [];
        var _etype747 = 0;
        _rtmp3748 = input.readListBegin();
        _etype747 = _rtmp3748.etype;
        _size744 = _rtmp3748.size;
        for (var _i749 = 0; _i749 < _size744; ++_i749)
        {
          var elem750 = null;
          elem750 = new ChannelNotificationSetting();
          elem750.read(input);
          this.setting.push(elem750);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_updateChannelNotificationSetting_args.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_updateChannelNotificationSetting_args');
  if (this.setting !== null && this.setting !== undefined) {
    output.writeFieldBegin('setting', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.setting.length);
    for (var iter751 in this.setting)
    {
      if (this.setting.hasOwnProperty(iter751))
      {
        iter751 = this.setting[iter751];
        iter751.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelService_updateChannelNotificationSetting_result = function(args) {
  this.e = null;
  if (args instanceof ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ChannelService_updateChannelNotificationSetting_result.prototype = {};
ChannelService_updateChannelNotificationSetting_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelService_updateChannelNotificationSetting_result.prototype.write = function(output) {
  output.writeStructBegin('ChannelService_updateChannelNotificationSetting_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
ChannelServiceClient.prototype = {};
ChannelServiceClient.prototype.approveChannelAndIssueChannelToken = function(channelId, callback) {
  this.send_approveChannelAndIssueChannelToken(channelId, callback); 
  if (!callback) {
    return this.recv_approveChannelAndIssueChannelToken();
  }
};

ChannelServiceClient.prototype.send_approveChannelAndIssueChannelToken = function(channelId, callback) {
  this.output.writeMessageBegin('approveChannelAndIssueChannelToken', Thrift.MessageType.CALL, this.seqid);
  var args = new ChannelService_approveChannelAndIssueChannelToken_args();
  args.channelId = channelId;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_approveChannelAndIssueChannelToken();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ChannelServiceClient.prototype.recv_approveChannelAndIssueChannelToken = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_approveChannelAndIssueChannelToken_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'approveChannelAndIssueChannelToken failed: unknown result';
};
ChannelServiceClient.prototype.approveChannelAndIssueRequestToken = function(channelId, otpId, callback) {
  this.send_approveChannelAndIssueRequestToken(channelId, otpId, callback); 
  if (!callback) {
    return this.recv_approveChannelAndIssueRequestToken();
  }
};

ChannelServiceClient.prototype.send_approveChannelAndIssueRequestToken = function(channelId, otpId, callback) {
  this.output.writeMessageBegin('approveChannelAndIssueRequestToken', Thrift.MessageType.CALL, this.seqid);
  var args = new ChannelService_approveChannelAndIssueRequestToken_args();
  args.channelId = channelId;
  args.otpId = otpId;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_approveChannelAndIssueRequestToken();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ChannelServiceClient.prototype.recv_approveChannelAndIssueRequestToken = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_approveChannelAndIssueRequestToken_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'approveChannelAndIssueRequestToken failed: unknown result';
};
ChannelServiceClient.prototype.fetchNotificationItems = function(localRev, callback) {
  this.send_fetchNotificationItems(localRev, callback); 
  if (!callback) {
    return this.recv_fetchNotificationItems();
  }
};

ChannelServiceClient.prototype.send_fetchNotificationItems = function(localRev, callback) {
  this.output.writeMessageBegin('fetchNotificationItems', Thrift.MessageType.CALL, this.seqid);
  var args = new ChannelService_fetchNotificationItems_args();
  args.localRev = localRev;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_fetchNotificationItems();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ChannelServiceClient.prototype.recv_fetchNotificationItems = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_fetchNotificationItems_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'fetchNotificationItems failed: unknown result';
};
ChannelServiceClient.prototype.getApprovedChannels = function(lastSynced, locale, callback) {
  this.send_getApprovedChannels(lastSynced, locale, callback); 
  if (!callback) {
    return this.recv_getApprovedChannels();
  }
};

ChannelServiceClient.prototype.send_getApprovedChannels = function(lastSynced, locale, callback) {
  this.output.writeMessageBegin('getApprovedChannels', Thrift.MessageType.CALL, this.seqid);
  var args = new ChannelService_getApprovedChannels_args();
  args.lastSynced = lastSynced;
  args.locale = locale;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getApprovedChannels();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ChannelServiceClient.prototype.recv_getApprovedChannels = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_getApprovedChannels_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getApprovedChannels failed: unknown result';
};
ChannelServiceClient.prototype.getChannelInfo = function(channelId, locale, callback) {
  this.send_getChannelInfo(channelId, locale, callback); 
  if (!callback) {
    return this.recv_getChannelInfo();
  }
};

ChannelServiceClient.prototype.send_getChannelInfo = function(channelId, locale, callback) {
  this.output.writeMessageBegin('getChannelInfo', Thrift.MessageType.CALL, this.seqid);
  var args = new ChannelService_getChannelInfo_args();
  args.channelId = channelId;
  args.locale = locale;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getChannelInfo();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ChannelServiceClient.prototype.recv_getChannelInfo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_getChannelInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getChannelInfo failed: unknown result';
};
ChannelServiceClient.prototype.getChannelNotificationSetting = function(channelId, locale, callback) {
  this.send_getChannelNotificationSetting(channelId, locale, callback); 
  if (!callback) {
    return this.recv_getChannelNotificationSetting();
  }
};

ChannelServiceClient.prototype.send_getChannelNotificationSetting = function(channelId, locale, callback) {
  this.output.writeMessageBegin('getChannelNotificationSetting', Thrift.MessageType.CALL, this.seqid);
  var args = new ChannelService_getChannelNotificationSetting_args();
  args.channelId = channelId;
  args.locale = locale;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getChannelNotificationSetting();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ChannelServiceClient.prototype.recv_getChannelNotificationSetting = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_getChannelNotificationSetting_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getChannelNotificationSetting failed: unknown result';
};
ChannelServiceClient.prototype.getChannelNotificationSettings = function(locale, callback) {
  this.send_getChannelNotificationSettings(locale, callback); 
  if (!callback) {
    return this.recv_getChannelNotificationSettings();
  }
};

ChannelServiceClient.prototype.send_getChannelNotificationSettings = function(locale, callback) {
  this.output.writeMessageBegin('getChannelNotificationSettings', Thrift.MessageType.CALL, this.seqid);
  var args = new ChannelService_getChannelNotificationSettings_args();
  args.locale = locale;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getChannelNotificationSettings();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ChannelServiceClient.prototype.recv_getChannelNotificationSettings = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_getChannelNotificationSettings_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getChannelNotificationSettings failed: unknown result';
};
ChannelServiceClient.prototype.getChannels = function(lastSynced, locale, callback) {
  this.send_getChannels(lastSynced, locale, callback); 
  if (!callback) {
    return this.recv_getChannels();
  }
};

ChannelServiceClient.prototype.send_getChannels = function(lastSynced, locale, callback) {
  this.output.writeMessageBegin('getChannels', Thrift.MessageType.CALL, this.seqid);
  var args = new ChannelService_getChannels_args();
  args.lastSynced = lastSynced;
  args.locale = locale;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getChannels();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ChannelServiceClient.prototype.recv_getChannels = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_getChannels_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getChannels failed: unknown result';
};
ChannelServiceClient.prototype.getDomains = function(lastSynced, callback) {
  this.send_getDomains(lastSynced, callback); 
  if (!callback) {
    return this.recv_getDomains();
  }
};

ChannelServiceClient.prototype.send_getDomains = function(lastSynced, callback) {
  this.output.writeMessageBegin('getDomains', Thrift.MessageType.CALL, this.seqid);
  var args = new ChannelService_getDomains_args();
  args.lastSynced = lastSynced;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getDomains();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ChannelServiceClient.prototype.recv_getDomains = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_getDomains_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDomains failed: unknown result';
};
ChannelServiceClient.prototype.getFriendChannelMatrices = function(channelIds, callback) {
  this.send_getFriendChannelMatrices(channelIds, callback); 
  if (!callback) {
    return this.recv_getFriendChannelMatrices();
  }
};

ChannelServiceClient.prototype.send_getFriendChannelMatrices = function(channelIds, callback) {
  this.output.writeMessageBegin('getFriendChannelMatrices', Thrift.MessageType.CALL, this.seqid);
  var args = new ChannelService_getFriendChannelMatrices_args();
  args.channelIds = channelIds;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getFriendChannelMatrices();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ChannelServiceClient.prototype.recv_getFriendChannelMatrices = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_getFriendChannelMatrices_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getFriendChannelMatrices failed: unknown result';
};
ChannelServiceClient.prototype.getNotificationBadgeCount = function(localRev, callback) {
  this.send_getNotificationBadgeCount(localRev, callback); 
  if (!callback) {
    return this.recv_getNotificationBadgeCount();
  }
};

ChannelServiceClient.prototype.send_getNotificationBadgeCount = function(localRev, callback) {
  this.output.writeMessageBegin('getNotificationBadgeCount', Thrift.MessageType.CALL, this.seqid);
  var args = new ChannelService_getNotificationBadgeCount_args();
  args.localRev = localRev;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getNotificationBadgeCount();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ChannelServiceClient.prototype.recv_getNotificationBadgeCount = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_getNotificationBadgeCount_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getNotificationBadgeCount failed: unknown result';
};
ChannelServiceClient.prototype.issueChannelToken = function(channelId, callback) {
  this.send_issueChannelToken(channelId, callback); 
  if (!callback) {
    return this.recv_issueChannelToken();
  }
};

ChannelServiceClient.prototype.send_issueChannelToken = function(channelId, callback) {
  this.output.writeMessageBegin('issueChannelToken', Thrift.MessageType.CALL, this.seqid);
  var args = new ChannelService_issueChannelToken_args();
  args.channelId = channelId;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_issueChannelToken();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ChannelServiceClient.prototype.recv_issueChannelToken = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_issueChannelToken_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'issueChannelToken failed: unknown result';
};
ChannelServiceClient.prototype.issueRequestToken = function(channelId, otpId, callback) {
  this.send_issueRequestToken(channelId, otpId, callback); 
  if (!callback) {
    return this.recv_issueRequestToken();
  }
};

ChannelServiceClient.prototype.send_issueRequestToken = function(channelId, otpId, callback) {
  this.output.writeMessageBegin('issueRequestToken', Thrift.MessageType.CALL, this.seqid);
  var args = new ChannelService_issueRequestToken_args();
  args.channelId = channelId;
  args.otpId = otpId;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_issueRequestToken();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ChannelServiceClient.prototype.recv_issueRequestToken = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_issueRequestToken_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'issueRequestToken failed: unknown result';
};
ChannelServiceClient.prototype.issueRequestTokenWithAuthScheme = function(channelId, otpId, authScheme, returnUrl, callback) {
  this.send_issueRequestTokenWithAuthScheme(channelId, otpId, authScheme, returnUrl, callback); 
  if (!callback) {
    return this.recv_issueRequestTokenWithAuthScheme();
  }
};

ChannelServiceClient.prototype.send_issueRequestTokenWithAuthScheme = function(channelId, otpId, authScheme, returnUrl, callback) {
  this.output.writeMessageBegin('issueRequestTokenWithAuthScheme', Thrift.MessageType.CALL, this.seqid);
  var args = new ChannelService_issueRequestTokenWithAuthScheme_args();
  args.channelId = channelId;
  args.otpId = otpId;
  args.authScheme = authScheme;
  args.returnUrl = returnUrl;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_issueRequestTokenWithAuthScheme();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ChannelServiceClient.prototype.recv_issueRequestTokenWithAuthScheme = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_issueRequestTokenWithAuthScheme_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'issueRequestTokenWithAuthScheme failed: unknown result';
};
ChannelServiceClient.prototype.reserveCoinUse = function(request, locale, callback) {
  this.send_reserveCoinUse(request, locale, callback); 
  if (!callback) {
    return this.recv_reserveCoinUse();
  }
};

ChannelServiceClient.prototype.send_reserveCoinUse = function(request, locale, callback) {
  this.output.writeMessageBegin('reserveCoinUse', Thrift.MessageType.CALL, this.seqid);
  var args = new ChannelService_reserveCoinUse_args();
  args.request = request;
  args.locale = locale;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_reserveCoinUse();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ChannelServiceClient.prototype.recv_reserveCoinUse = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_reserveCoinUse_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'reserveCoinUse failed: unknown result';
};
ChannelServiceClient.prototype.revokeChannel = function(channelId, callback) {
  this.send_revokeChannel(channelId, callback); 
  if (!callback) {
  this.recv_revokeChannel();
  }
};

ChannelServiceClient.prototype.send_revokeChannel = function(channelId, callback) {
  this.output.writeMessageBegin('revokeChannel', Thrift.MessageType.CALL, this.seqid);
  var args = new ChannelService_revokeChannel_args();
  args.channelId = channelId;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_revokeChannel();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ChannelServiceClient.prototype.recv_revokeChannel = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_revokeChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
ChannelServiceClient.prototype.syncChannelData = function(lastSynced, locale, callback) {
  this.send_syncChannelData(lastSynced, locale, callback); 
  if (!callback) {
    return this.recv_syncChannelData();
  }
};

ChannelServiceClient.prototype.send_syncChannelData = function(lastSynced, locale, callback) {
  this.output.writeMessageBegin('syncChannelData', Thrift.MessageType.CALL, this.seqid);
  var args = new ChannelService_syncChannelData_args();
  args.lastSynced = lastSynced;
  args.locale = locale;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_syncChannelData();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ChannelServiceClient.prototype.recv_syncChannelData = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_syncChannelData_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'syncChannelData failed: unknown result';
};
ChannelServiceClient.prototype.updateChannelNotificationSetting = function(setting, callback) {
  this.send_updateChannelNotificationSetting(setting, callback); 
  if (!callback) {
  this.recv_updateChannelNotificationSetting();
  }
};

ChannelServiceClient.prototype.send_updateChannelNotificationSetting = function(setting, callback) {
  this.output.writeMessageBegin('updateChannelNotificationSetting', Thrift.MessageType.CALL, this.seqid);
  var args = new ChannelService_updateChannelNotificationSetting_args();
  args.setting = setting;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateChannelNotificationSetting();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ChannelServiceClient.prototype.recv_updateChannelNotificationSetting = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ChannelService_updateChannelNotificationSetting_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
